'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Edit, Trash2, Eye, Loader2, ArrowLeft } from 'lucide-react';
import { toast } from 'react-hot-toast';
import Link from 'next/link';
import Image from 'next/image';
import Modal from '@/components/Modal';
import OrderForm from '@/components/OrderForm';

const TemplatesPage = () => {
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [deletingId, setDeletingId] = useState(null);
  const [previewModalOpen, setPreviewModalOpen] = useState(false);
  const [openFormModalOpen, setOpenFormModalOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const router = useRouter();

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      const response = await fetch('/api/templates');
      if (!response.ok) throw new Error('Failed to fetch templates');
      const data = await response.json();
      setTemplates(data);
    } catch (error) {
      console.error('Error fetching templates:', error);
      toast.error('Failed to load templates');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this template? This action cannot be undone.')) {
      return;
    }

    setDeletingId(id);
    try {
      const response = await fetch(`/api/templates/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete template');
      }

      setTemplates(templates.filter(template => template._id !== id));
      toast.success('Template deleted successfully');
    } catch (err) {
      console.error('Error deleting template:', err);
      toast.error(err.message || 'Failed to delete template');
    } finally {
      setDeletingId(null);
    }
  };

  const duplicateTemplate = async (template) => {
    try {
      const response = await fetch('/api/templates', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...template,
          name: `${template.name} (Copy)`,
          slug: `${template.slug}-copy-${Date.now()}`,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to duplicate template');
      }

      const newTemplate = await response.json();
      setTemplates([...templates, newTemplate]);
      toast.success('Template duplicated successfully');
      
      router.push(`/admin/templates/edit/${newTemplate._id}`);
    } catch (err) {
      console.error('Error duplicating template:', err);
      toast.error(err.message || 'Failed to duplicate template');
    }
  };

  const handlePreview = (template) => {
    setSelectedTemplate(template);
    setPreviewModalOpen(true);
  };

  const handleOpenForm = (template) => {
    setSelectedTemplate(template);
    setOpenFormModalOpen(true);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin text-blue-500" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[var(--background)]">
      <div className="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
        <div className="flex flex-col justify-between mb-8 md:flex-row md:items-center">
          <div>
            <h1 className="text-3xl font-bold text-[var(--primary-text)] tracking-tight">Templates</h1>
            <p className="mt-1 text-sm text-[var(--secondary-text)]">
              Manage your email templates for order confirmations, receipts, and more.
            </p>
          </div>
          <Link
            href="/admin/templates/new"
            className="inline-flex items-center px-4 py-2 mt-4 text-sm font-medium text-black bg-[var(--accent-text)] rounded-md shadow-sm hover:bg-[var(--accent-text)]/80 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)] md:mt-0"
          >
            <Plus className="w-4 h-4 mr-2" />
            New Template
          </Link>
        </div>

        {templates && templates.length === 0 ? (
          <div className="p-8 text-center bg-[var(--accent-text)]/5 rounded-xl shadow-[0px_0px_10px_-1px_#000000] border border-[var(--accent-text)]/20">
            <svg
              className="w-12 h-12 mx-auto text-[var(--accent-text)]"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              />
            </svg>
            <h3 className="mt-2 text-xl font-medium text-[var(--primary-text)]">No templates</h3>
            <p className="mt-1 text-[var(--secondary-text)]">Get started by creating a new template.</p>
            <div className="mt-6">
              <Link
                href="/admin/templates/new"
                className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-black bg-[var(--accent-text)] hover:bg-[var(--accent-text)]/80 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)]"
              >
                <Plus className="w-4 h-4 mr-2" />
                Create Template
              </Link>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {templates.map((template) => (
              <div key={template._id} className="bg-[var(--background)] overflow-hidden shadow-[0px_0px_10px_-1px_#000000] rounded-xl border border-zinc-800 hover:border-[var(--accent-text)]/50 transition-colors">
                <div className="p-4 flex flex-col h-full">
                  <div className="flex-none">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-medium text-[var(--primary-text)] truncate" title={template.name}>
                        {template.name}
                      </h3>
                      {template.enabled ? (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-[var(--accent-text)]/20 text-[var(--accent-text)]">
                          Enabled
                        </span>
                      ) : (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-700 text-gray-300">
                          Disabled
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-[var(--secondary-text)] mb-4 truncate" title={template.description || template.slug}>
                      {template.description || template.slug}
                    </p>
                  </div>
                  <div className="flex-1 flex flex-col justify-end">
                    <div className="flex justify-between p-4 border-t border-zinc-800 space-x-2">
                      <button
                        onClick={() => handlePreview(template)}
                        className="inline-flex items-center px-3 py-1.5 border border-zinc-700 shadow-sm text-sm font-medium rounded-md text-[var(--primary-text)] bg-[var(--background)] hover:bg-zinc-800 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)]"
                        title="Preview"
                      >
                        <Eye className="w-4 h-4 mr-1" /> Preview
                      </button>
                      <Link
                        href={`/admin/templates/edit/${template._id}`}
                        className="inline-flex items-center px-3 py-1.5 border border-zinc-700 shadow-sm text-sm font-medium rounded-md text-[var(--primary-text)] bg-[var(--background)] hover:bg-zinc-800 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)]"
                        title="Edit"
                      >
                        <Edit className="w-4 h-4 mr-1" /> Edit
                      </Link>
                    </div>
                    <div className="flex justify-between p-4 pt-0 border-t-0 border-zinc-800 space-x-2">
                      <button
                        onClick={() => handleOpenForm(template)}
                        className="inline-flex items-center px-3 py-1.5 border border-[var(--accent-text)]/30 shadow-sm text-sm font-medium rounded-md text-[var(--accent-text)] bg-[var(--accent-text)]/10 hover:bg-[var(--accent-text)]/20 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)]"
                        title="Open Form"
                      >
                        <Plus className="w-4 h-4 mr-1" /> Open Form
                      </button>
                      <button
                        onClick={() => duplicateTemplate(template)}
                        className="inline-flex items-center px-3 py-1.5 border border-zinc-700 shadow-sm text-sm font-medium rounded-md text-[var(--primary-text)] bg-[var(--background)] hover:bg-zinc-800 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)]"
                        title="Duplicate"
                      >
                        <Plus className="w-4 h-4 mr-1" /> Duplicate
                      </button>
                      <button
                        onClick={() => handleDelete(template._id)}
                        className="inline-flex items-center px-3 py-1.5 border border-red-700/50 shadow-sm text-sm font-medium rounded-md text-red-500 bg-red-900/20 hover:bg-red-900/30 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={deletingId === template._id}
                        title="Delete"
                      >
                        {deletingId === template._id ? (
                          <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                          <Trash2 className="w-4 h-4" />
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        <Modal
          isOpen={previewModalOpen}
          onClose={() => setPreviewModalOpen(false)}
          title={selectedTemplate ? `Preview: ${selectedTemplate.name}` : 'Preview Template'}
        >
          {selectedTemplate && (
            <div className="space-y-4">
              <div className="bg-[var(--background)] p-4 rounded-lg border border-zinc-800">
                <h3 className="font-medium text-[var(--primary-text)]">Template Preview</h3>
                <div className="mt-4 border rounded-md overflow-hidden">
                  <div 
                    className="p-4 overflow-auto max-h-[400px] bg-white text-black"
                    dangerouslySetInnerHTML={{ 
                      __html: selectedTemplate.html || '<div class="p-4 text-center text-gray-500">No HTML content defined</div>' 
                    }} 
                  />
                </div>
              </div>
              
              <div className="bg-[var(--background)] p-4 rounded-lg border border-zinc-800">
                <h3 className="font-medium text-[var(--primary-text)]">Template Details</h3>
                <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
                  <div>
                    <span className="text-[var(--secondary-text)]">Name:</span> {selectedTemplate.name}
                  </div>
                  <div>
                    <span className="text-[var(--secondary-text)]">Slug:</span> {selectedTemplate.slug}
                  </div>
                  <div>
                    <span className="text-[var(--secondary-text)]">Status:</span> {selectedTemplate.enabled ? 
                      <span className="text-[var(--accent-text)]">Enabled</span> : 
                      <span className="text-gray-400">Disabled</span>
                    }
                  </div>
                  <div>
                    <span className="text-[var(--secondary-text)]">Brand:</span> {selectedTemplate.brand || 'N/A'}
                  </div>
                </div>
              </div>
              
              <div className="bg-[var(--background)] p-4 rounded-lg border border-zinc-800">
                <h3 className="font-medium text-[var(--primary-text)]">Form Fields</h3>
                <div className="mt-2 space-y-2">
                  {selectedTemplate.fields && selectedTemplate.fields.length > 0 ? (
                    selectedTemplate.fields.map((field, index) => (
                      <div key={index} className="p-2 bg-[var(--background)] rounded border border-zinc-700">
                        <p><span className="font-medium text-[var(--primary-text)]">{field.label}</span> <span className="text-[var(--secondary-text)]">({field.type})</span></p>
                        <p className="text-xs text-[var(--secondary-text)]">Name: {field.name}</p>
                        {field.required && <span className="text-xs text-red-500">Required</span>}
                      </div>
                    ))
                  ) : (
                    <p className="text-[var(--secondary-text)]">No fields defined</p>
                  )}
                </div>
              </div>
            </div>
          )}
        </Modal>

        <Modal
          isOpen={openFormModalOpen}
          onClose={() => setOpenFormModalOpen(false)}
          title={selectedTemplate ? `${selectedTemplate.name} Form` : 'Template Form'}
        >
          {selectedTemplate && (
            <div>
              <OrderForm
                template={selectedTemplate}
                brand={{
                  id: selectedTemplate._id || selectedTemplate.id,
                  name: selectedTemplate.name,
                  displayName: selectedTemplate.displayName || selectedTemplate.name,
                  logo: selectedTemplate.logo || 'default-logo.png'
                }}
                onClose={() => setOpenFormModalOpen(false)}
                onReceiptGenerated={() => {
                  setOpenFormModalOpen(false);
                  toast.success('Receipt generated successfully!');
                }}
              />
            </div>
          )}
        </Modal>
      </div>
    </div>
  );
};

export default TemplatesPage;
