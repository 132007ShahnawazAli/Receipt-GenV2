'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { toast } from 'react-hot-toast';
import { 
  Loader2, Save, ArrowLeft, Plus, Trash2, Eye, Code, Code2,
  Settings, Layout, FileText, Check, X, ChevronDown, 
  ChevronUp, ExternalLink, Copy, Smartphone, Tablet, 
  Monitor, RefreshCw, HelpCircle, AlertCircle, Info,
  Edit, Mail, Clipboard, FileCode, GripVertical
} from 'lucide-react';
import { motion, AnimatePresence, Reorder } from 'framer-motion';
import Link from 'next/link';
import CodeMirror from '@uiw/react-codemirror';
import { html } from '@codemirror/lang-html';
import { dracula } from '@uiw/codemirror-theme-dracula';

// Form validation schema
const templateSchema = z.object({
  name: z.string().min(2, 'Name is required').max(100),
  slug: z.string().min(2).max(100).regex(/^[a-z0-9-]+$/, 'Slug can only contain lowercase letters, numbers, and hyphens'),
  description: z.string().optional(),
  logo: z.string().min(1, 'Logo URL is required'),
  subject: z.string().min(5, 'Subject is required').max(200),
  html: z.string().min(50, 'HTML content is too short'),
  fields: z.array(z.object({
    name: z.string().min(1, 'Field name is required'),
    type: z.enum(['text', 'number', 'email', 'date', 'select']),
    label: z.string().min(1, 'Label is required'),
    required: z.boolean().default(false),
    options: z.array(z.string()).optional(),
    defaultValue: z.any().optional(),
  })).optional(),
  enabled: z.boolean().default(true),
});

const EditTemplatePage = () => {
  const router = useRouter();
  const { id } = useParams();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [previewData, setPreviewData] = useState({});
  const [activeTab, setActiveTab] = useState('editor');
  
  const [isDragging, setIsDragging] = useState(false);
  const [draggedField, setDraggedField] = useState(null);
  
  const { register, handleSubmit, formState: { errors }, watch, setValue, reset } = useForm({
    resolver: zodResolver(templateSchema),
    defaultValues: {
      name: '',
      slug: '',
      description: '',
      logo: '',
      subject: '',
      html: '',
      enabled: true,
      fields: []
    }
  });

  const formData = watch();

  // Load template data
  useEffect(() => {
    const fetchTemplate = async () => {
      try {
        const response = await fetch(`/api/templates/${id}`);
        if (!response.ok) throw new Error('Failed to fetch template');
        
        const data = await response.json();
        reset({
          ...data,
          // Ensure we have default values for all required fields
          fields: data.fields || []
        });
        
        // Set initial preview data
        const previewData = {};
        data.fields?.forEach(field => {
          previewData[field.name] = field.defaultValue || '';
        });
        setPreviewData({
          ...previewData,
          name: data.name || 'Your Company',
          logo: data.logo || 'https://via.placeholder.com/150',
          orderNumber: '#' + Math.floor(100000 + Math.random() * 900000),
          date: new Date().toLocaleDateString(),
          productName: 'Sample Product',
          quantity: 1,
          price: '99.99',
          total: '99.99',
          customerName: 'John Doe',
          shippingName: 'John Doe',
          shippingAddress: '123 Main St',
          shippingCity: 'New York',
          shippingState: 'NY',
          shippingZip: '10001',
          shippingCountry: 'United States'
        });
      } catch (error) {
        console.error('Error loading template:', error);
        toast.error('Failed to load template');
        router.push('/admin/templates');
      } finally {
        setIsLoading(false);
      }
    };

    if (id) {
      fetchTemplate();
    }
  }, [id, reset, router]);

  // Update preview data when form changes
  useEffect(() => {
    if (!isLoading) {
      const preview = { ...previewData };
      preview.name = formData.name || 'Your Company';
      preview.logo = formData.logo || 'https://via.placeholder.com/150';
      setPreviewData(preview);
    }
  }, [formData.name, formData.logo, isLoading]);

  const onSubmit = async (data) => {
    setIsSubmitting(true);
    try {
      const response = await fetch(`/api/templates/${id || ''}`, {
        method: id ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error('Failed to save template');
      }

      toast.success(`Template ${id ? 'updated' : 'created'} successfully`);
      router.push('/admin/templates');
    } catch (error) {
      console.error('Error saving template:', error);
      toast.error(error.message || 'Failed to save template');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to replace placeholders with preview data
  const getPreviewHtml = (html) => {
    if (!html) return '';
    
    // Replace placeholders with preview data
    let previewHtml = html;
    
    // Replace all field placeholders
    Object.keys(previewData).forEach(key => {
      const value = previewData[key];
      const regex = new RegExp(`{${key}}`, 'g');
      previewHtml = previewHtml.replace(regex, value);
    });
    
    // Add default styling if not present
    if (!previewHtml.includes('<style>')) {
      previewHtml = `
        <style>
          body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.5;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
          }
          table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
          }
          th, td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
          }
          th {
            background-color: #f2f2f2;
          }
          .receipt-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
          }
          .receipt-logo {
            max-width: 150px;
            max-height: 60px;
          }
          .receipt-details {
            margin-bottom: 30px;
          }
          .receipt-total {
            font-weight: bold;
            font-size: 1.2em;
            text-align: right;
          }
        </style>
      ` + previewHtml;
    }
    
    return previewHtml;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-[var(--background)]">
        <div className="flex flex-col items-center">
          <Loader2 className="w-10 h-10 animate-spin text-[var(--accent-text)]" />
          <p className="mt-4 text-[var(--secondary-text)]">Loading template...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[var(--background)] py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header with gradient accent */}
        <div className="relative mb-8 pb-4 border-b border-zinc-800">
          <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-[var(--accent-text)] via-purple-500 to-blue-500"></div>
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center">
              <h1 className="text-2xl font-bold text-[var(--primary-text)] tracking-tight">Edit Template</h1>
            </div>
            <div className="flex items-center space-x-3">
              <div className="text-sm text-[var(--secondary-text)] flex items-center">
                <Info className="w-4 h-4 mr-2 text-[var(--accent-text)]" />
                <span>Editing: <span className="text-[var(--accent-text)]">{formData.name || 'New Template'}</span></span>
              </div>
              <Link 
                href="/admin/templates" 
                className="flex items-center px-3 py-1.5 bg-zinc-800 hover:bg-zinc-700 text-[var(--primary-text)] rounded-md transition-colors"
              >
                <ArrowLeft className="w-4 h-4 mr-1.5" /> Back to Templates
              </Link>
            </div>
          </div>
        </div>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 gap-6 lg:grid-cols-12">
          <div className="space-y-6 lg:col-span-8">
            {/* Basic template info section */}
            <div className="bg-gradient-to-b from-zinc-900 to-zinc-950 overflow-hidden shadow-lg rounded-xl border border-zinc-800 hover:border-zinc-700 transition-all duration-300">
              <div className="px-6 py-5 border-b border-zinc-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Settings className="w-5 h-5 mr-2 text-[var(--accent-text)]" />
                  <h2 className="text-lg font-medium text-[var(--primary-text)]">Template Information</h2>
                </div>
                <div className="flex items-center">
                  <span className="text-xs text-[var(--secondary-text)] bg-zinc-800 px-2 py-1 rounded-md">Step 1 of 3</span>
                </div>
              </div>
              
              <div className="px-6 py-5 space-y-6">
                {/* Form fields */}
              </div>
            </div>

            {/* HTML Editor section */}
            <div className="bg-gradient-to-b from-zinc-900 to-zinc-950 overflow-hidden shadow-lg rounded-xl border border-zinc-800 hover:border-zinc-700 transition-all duration-300">
              <div className="px-6 py-5 border-b border-zinc-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Code className="w-5 h-5 mr-2 text-[var(--accent-text)]" />
                  <h2 className="text-lg font-medium text-[var(--primary-text)]">Template Design</h2>
                </div>
                <div className="flex items-center">
                  <span className="text-xs text-[var(--secondary-text)] bg-zinc-800 px-2 py-1 rounded-md">Step 2 of 3</span>
                </div>
              </div>

              <div className="p-6">
                {/* HTML Editor */}
              </div>
            </div>

            {/* Fields section */}
            <div className="bg-gradient-to-b from-zinc-900 to-zinc-950 overflow-hidden shadow-lg rounded-xl border border-zinc-800 hover:border-zinc-700 transition-all duration-300">
              <div className="px-6 py-5 border-b border-zinc-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Layout className="w-5 h-5 mr-2 text-[var(--accent-text)]" />
                  <h2 className="text-lg font-medium text-[var(--primary-text)]">Dynamic Fields</h2>
                </div>
                <div className="flex items-center">
                  <span className="text-xs text-[var(--secondary-text)] bg-zinc-800 px-2 py-1 rounded-md">Step 3 of 3</span>
                </div>
              </div>
              
              <div className="p-6">
                {/* Fields content */}
              </div>
            </div>
          </div>
          
          <div className="space-y-6 lg:col-span-4">
            {/* Preview section */}
            <div className="bg-gradient-to-b from-zinc-900 to-zinc-950 overflow-hidden shadow-lg rounded-xl border border-zinc-800 hover:border-zinc-700 transition-all duration-300">
              <div className="px-6 py-5 border-b border-zinc-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Eye className="w-5 h-5 mr-2 text-[var(--accent-text)]" />
                  <h2 className="text-lg font-medium text-[var(--primary-text)]">Template Preview</h2>
                </div>
              </div>
              
              <div className="p-6">
                {/* Preview content */}
              </div>
            </div>

            {/* Template Actions section */}
            <div className="bg-gradient-to-b from-zinc-900 to-zinc-950 overflow-hidden shadow-lg rounded-xl border border-zinc-800 hover:border-zinc-700 transition-all duration-300">
              <div className="px-6 py-5 border-b border-zinc-800 flex items-center justify-between">
                <div className="flex items-center">
                  <Settings className="w-5 h-5 mr-2 text-[var(--accent-text)]" />
                  <h2 className="text-lg font-medium text-[var(--primary-text)]">Template Actions</h2>
                </div>
              </div>
              
              <div className="p-6 space-y-4">
                {/* Actions content */}
              </div>
            </div>
            
            <div className="sticky bottom-0 left-0 right-0 bg-zinc-950/80 backdrop-blur-sm border-t border-zinc-800 p-4 mt-6 flex justify-between items-center">
              <div className="flex items-center">
                <div className="w-2 h-2 rounded-full bg-[var(--accent-text)] mr-2"></div>
                <span className="text-sm text-[var(--primary-text)]">Editing: <span className="font-medium">{formData.name || 'Template'}</span></span>
              </div>
              
              <div className="flex items-center space-x-3">
                <Link
                  href="/admin/templates"
                  className="inline-flex items-center px-4 py-2 border border-zinc-700 text-sm font-medium rounded-lg shadow-sm text-[var(--primary-text)] bg-zinc-800 hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-zinc-700 transition-all duration-200"
                >
                  <X className="-ml-0.5 mr-1.5 h-4 w-4 text-[var(--secondary-text)]" />
                  Cancel
                </Link>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="inline-flex items-center px-4 py-2 border border-[var(--accent-text)]/30 text-sm font-medium rounded-lg shadow-sm text-[var(--accent-text)] bg-[var(--accent-text)]/10 hover:bg-[var(--accent-text)]/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-text)] transition-all duration-200"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save className="-ml-0.5 mr-1.5 h-4 w-4" />
                      Save Template
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
};

export default EditTemplatePage;
